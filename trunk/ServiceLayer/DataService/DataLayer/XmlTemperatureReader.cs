///////////////////////////////////////////////////////////
//  XmlTemperatureReader.cs
//  Implementation of the Class XmlTemperatureReader
//  Generated by Enterprise Architect
//  Created on:      09-Feb-2009 4:45:30 PM
//  Original author: Gary
///////////////////////////////////////////////////////////



using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml.Linq;
using Bortosky.Samples.Temperature.DataService.DataLayer;

namespace Bortosky.Samples.Temperature.DataService.DataLayer {
    public class XmlTemperatureReader : ITemperatureReader
    {
        private XDocument temperatureData;
        public XmlTemperatureReader()
        {
            this.temperatureData = XDocument.Load(Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().CodeBase), "temps.xml"));
        }

        /// 
        /// <param name="stationId">The station identifer from the National Climatic Data
        /// Center</param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="day"></param>
        /// <param name="days">The days to return, note you may receive less than this
        /// number if data is missing from the source. The last date returned will be this
        /// many days past the specified start date</param>
        public TemperatureResponse GetTemperaturesByDate(string stationId, int year, int month, int day, int days)
        {
            DateTime date = new DateTime(year, month, day);
            TemperatureResponse r = new TemperatureResponse();
            var query =
                from item in this.temperatureData.Root.Descendants("DBROW")
                where (item.Element("STATION_ID").Value.CompareTo(stationId) == 0 && item.Element("YEARMODA").Value.CompareTo(date.ToString("yyyyMMdd")) >= 0) && (item.Element("YEARMODA").Value.CompareTo(date.AddDays(days).ToString("yyyyMMdd")) < 0)
                orderby (string)item.Element("YEARMODA")
                select new DateRangeType()
                {
                    RangeDate = this.DateParser(item).ToString("yyyy-MM-dd"),
                    Range = new TemperatureRangeType()
                    {
                        Minimum = float.Parse(item.Element("MINTEMP").Value),
                        Maximum = float.Parse(item.Element("MAXTEMP").Value)
                    }
                };
            // clean out 9999.9 values from NCDS weather file. Replace such values with the prior day's values.
            r.DateRange = query.ToArray<DateRangeType>();
            float min = 0, max = 0;
            foreach (DateRangeType dr in r.DateRange)
            {
                if (dr.Range.Minimum < -20 || dr.Range.Minimum > 120)
                    dr.Range.Minimum = min;
                if (dr.Range.Maximum < -20 || dr.Range.Maximum > 120)
                    dr.Range.Maximum = max;
                max = dr.Range.Maximum;
                min = dr.Range.Minimum;
            }
            return r;
        }

        public AvailableDatesResponse GetAvailableDates(string stationId)
        {
            Func<XElement, Boolean> stationTest = e => e.Element("STATION_ID").Value.CompareTo(stationId).Equals(0);
            IEnumerable<XElement> elements = this.temperatureData.Root.Descendants("DBROW");
            XElement fx = elements.FirstOrDefault(stationTest);
            if (fx == null)
                throw new ArgumentException(string.Format("Station ID '{0}' was not found", stationId));
            else
            {
                XElement lx = elements.LastOrDefault(stationTest);
                DateTime fd = DateParser(fx);
                DateTime ld = DateParser(lx);
                return new AvailableDatesResponse() { AvailableDates = new AvailableDatesType() { FirstDate = fd.ToString("s"), DaysAvailable = (ld - fd).Days } };
            }
        }

        private DateTime DateParser(string ncdsDate)
        {
            return new System.DateTime(int.Parse(ncdsDate.Substring(0, 4)), int.Parse(ncdsDate.Substring(4, 2)), int.Parse(ncdsDate.Substring(6, 2)));
        }
        private DateTime DateParser(XElement dbrow)
        {
            return DateParser(dbrow.Element("YEARMODA").Value);
        }
        
    }//end XmlTemperatureReader

}//end namespace DataLayer