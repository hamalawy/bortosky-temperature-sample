///////////////////////////////////////////////////////////
//  XmlRetailerService.cs
//  Implementation of the Class XmlRetailerService
//  Generated by Enterprise Architect
//  Created on:      14-Mar-2009 1:56:55 PM
//  Original author: Gary
///////////////////////////////////////////////////////////




using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using System.Xml.XPath;
using System.IO;
using System.Reflection;
using Bortosky.Samples.RetailChain.Client.Data;
namespace Bortosky.Samples.RetailChain.Client.Data
{
    public class XmlRetailerService : IRetailerService
    {
        protected XDocument doc;
        protected XNamespace ns = "uri:bortosky.com/retail";
        protected XNamespace wsns = "uri:bortosky.com/retail/mock";

        public XmlRetailerService()
        {
            this.doc = XDocument.Load(Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().CodeBase), "stores.xml"));
        }

        public IEnumerable<Store> GetStores()
        {
            var query =
                from item in this.doc.Descendants(ns + "STORE")
                select GetStore(item);


            //System.Random r = new System.Random();
            //string[] weeks = new string[] { "2009-W20", "2009-W21", "2009-W22" };
            //foreach (XElement n in doc.Root.Descendants(ns + "STORE"))
            //{
            //    XElement sex = new XElement(wsns + "SALES");
            //    foreach (string week in weeks)
            //    {
            //        XElement wex = new XElement(wsns + "WEEK");
            //        wex.Add(new XAttribute("ISO", week));
            //        foreach (Brand b in this.brands)
            //        {
            //            XElement bex = new XElement(wsns + "SALE");
            //            XElement bx = new XElement(wsns + "BRAND");
            //            bx.Add(new XAttribute("ID", b.Id));
            //            bex.Add(bx);
            //            bex.Add(new XElement(wsns + "GROSS", r.Next(2000)));
            //            wex.Add(bex);
            //        }
            //        sex.Add(wex);
            //    }
            //    n.Add(sex);
            //}
            //doc.Save(@"E:\stuff.xml");
            
            
            return query;
        }

        /// 
        /// <param name="storeId"></param>
        /// <param name="week"></param>
        public IEnumerable<WeeklySale> GetWeeklySales(string storeId, string week)
        {
            var query =
                from sale in this.doc.Descendants(wsns + "SALE")
                where sale.Ancestors(ns + "STORE").First().Attribute("ID").Value.Equals(storeId) && sale.Ancestors(wsns + "WEEK").First().Attribute("ISO").Value.Equals(week)
                select new WeeklySale()
                {
                    Brand = new Brand() { Id = sale.Element(wsns + "BRAND").Attribute("ID").Value },
                    ISOWeek = week,
                    GrossAmount = float.Parse(sale.Element(wsns + "GROSS").Value),
                    Store = GetStore(sale.Ancestors(ns + "STORE").First())
                };
            return query;
        }
        public Store GetStore(string storeId)
        {
            var query =
                from item in this.doc.Root.Descendants(ns + "STORE")
                where item.Attribute("ID").Value.Equals(storeId)
                select GetStore(item);
            return query.First();
        }

        private Store GetStore(XElement store)
        {
            return new Store()
            {
                Id = store.Attribute("ID").Value,
                Name = store.Element(ns + "NAME").Value,
                Location = new Location()
                {
                    Street = store.Element(ns + "ADDRESS").Element(ns + "STREET").Value,
                    City = store.Element(ns + "ADDRESS").Element(ns + "CITY").Value,
                    State = store.Element(ns + "ADDRESS").Element(ns + "STATE").Value,
                    ZIP = store.Element(ns + "ADDRESS").Element(ns + "ZIP").Value,
                    Latitude = float.Parse(store.Element(ns + "GEO").Element(ns + "LAT").Value),
                    Longitude = float.Parse(store.Element(ns + "GEO").Element(ns + "LON").Value)
                }
            };
        }

    }//end XmlRetailerService

}//end namespace Data