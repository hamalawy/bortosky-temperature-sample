///////////////////////////////////////////////////////////
//  GoogleVisualizationTemperatureSerializer.cs
//  Implementation of the Class GoogleVisualizationTemperatureSerializer
//  Generated by Enterprise Architect
//  Created on:      13-Feb-2009 3:06:15 PM
//  Original author: Gary
///////////////////////////////////////////////////////////



using System;
using System.IO;
using Bortosky.Samples.Temperature.Client.DataLayer;
namespace Bortosky.Samples.Temperature.Client.DataLayer {
	public class GoogleVisualizationTemperatureSerializer : ITemperatureSerializer {


		/// 
		/// <param name="stationId"></param>
		/// <param name="year"></param>
		/// <param name="month"></param>
		/// <param name="day"></param>
		/// <param name="days"></param>
		/// <param name="stream"></param>
        public void SerializeTemperatureData(string stationId, int year, int month, int day, int days, Stream stream)
        {
            using (TemperatureServiceReference.TemperatureServiceSoapClient c = new Bortosky.Samples.Temperature.Client.DataLayer.TemperatureServiceReference.TemperatureServiceSoapClient())
            {
                this.SerializeTemperatureData(c, stationId, year, month, day, days, stream);
                c.Close();
            }
        }

		/// 
		/// <param name="stationId"></param>
		/// <param name="days"></param>
		/// <param name="stream"></param>
		public void SerializeRecentTemperatureData(string stationId, int days, Stream stream){
            using (TemperatureServiceReference.TemperatureServiceSoapClient c = new Bortosky.Samples.Temperature.Client.DataLayer.TemperatureServiceReference.TemperatureServiceSoapClient())
            {
                TemperatureServiceReference.GetAvailableDatesResult gad = c.GetAvailableDates(stationId);
                DateTime fd = DateTime.Parse(gad.AvailableDates.FirstDate).AddDays(gad.AvailableDates.DaysAvailable + (1 - days));
                this.SerializeTemperatureData(c, stationId, fd.Year, fd.Month, fd.Day, days, stream);
                c.Close();
            }
		}

		/// 
		/// <param name="client"></param>
		/// <param name="stationId"></param>
		/// <param name="year"></param>
		/// <param name="month"></param>
		/// <param name="day"></param>
		/// <param name="days"></param>
		/// <param name="stream"></param>
        private void SerializeTemperatureData(TemperatureServiceReference.TemperatureServiceSoapClient client, string stationId, int year, int month, int day, int days, Stream stream)
        {
            TemperatureDataSet ds = new TemperatureDataSet();
            TemperatureServiceReference.GetTemperaturesByDayResult res = client.GetTemperaturesByDay(stationId, year, month, day, days);
            foreach (TemperatureServiceReference.DateRangeType dt in res)
                ds.TemperatureTable.AddTemperatureTableRow(DateTime.Parse(dt.RangeDate), dt.Range.Maximum, dt.Range.Minimum);
            Bortosky.Google.Visualization.GoogleDataTable g = new Bortosky.Google.Visualization.GoogleDataTable(ds.TemperatureTable);
            g.SetGoogleDateType("TempDate", Bortosky.Google.Visualization.GoogleDateType.Date);
            g.WriteJson(stream);
        }

	}//end GoogleVisualizationTemperatureSerializer

}//end namespace DataLayer